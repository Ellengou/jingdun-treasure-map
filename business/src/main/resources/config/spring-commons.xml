<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
       default-lazy-init="false">

    <description>Spring公共配置</description>
    <!--隐式地向 Spring 容器注册 -->
    <context:annotation-config />
    <!--扫描注解Bean -->
    <context:component-scan base-package="com.jd">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:*datasource.properties</value>
                <value>classpath:*resource.properties</value>
                <value>classpath:*props/error.properties</value>
                <value>classpath:*config.properties</value>
            </list>
        </property>
    </bean>

    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
                <entry key="html" value="text/html"/>
            </map>
        </property>
    </bean>

    <!-- **************** druid 监控连接池配置 ***************** https://github.com/alibaba/druid/wiki -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 1 FROM DUAL"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <!-- 对泄漏的连接 自动关闭 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/><!--
			打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${jdbc.logAbandoned}"/> <!-- 关闭abanded连接时输出错误日志 -->
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="mergeStat"/>
        <!-- <property name="filters" value="stat" /> -->
        <!-- 慢日志查询 缺省为3秒 修改为10秒 10000 -->
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=5000"/>
        <!-- DruidDataSource各自独立 ， 支持配置公用监控数据 -->
        <property name="useGlobalDataSourceStat" value="true"/>
        <!-- 事务是否自动提交 -->
        <property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}"/>
    </bean>

    <!-- **************** druid 监控连接池配置 ***************** https://github.com/alibaba/druid/wiki -->
    <bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 1 FROM DUAL"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
        <!-- 对泄漏的连接 自动关闭 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/><!--
			打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${jdbc.logAbandoned}"/> <!-- 关闭abanded连接时输出错误日志 -->
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="mergeStat"/>
        <!-- <property name="filters" value="stat" /> -->
        <!-- 慢日志查询 缺省为3秒 修改为10秒 10000 -->
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=5000"/>
        <!-- DruidDataSource各自独立 ， 支持配置公用监控数据 -->
        <property name="useGlobalDataSourceStat" value="true"/>
        <!-- 事务是否自动提交 -->
        <property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="multipleDataSource"/>
    </bean>

    <!-- druid 监控 spring -->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.jd.service.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut"/>
    </aop:config>

    <!-- MyBatis Mapper.XMl 配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="multipleDataSource"/>
        <property name="configLocation" value="classpath:config/mybatis.xml"/>
        <!-- 自动匹配Mapper映射文件 -->
        <property name="mapperLocations" value="classpath:com/jd/dao/mapper/**/*.xml"/>
        <property name="typeAliasesPackage" value="com.jd.entity"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jd.dao.mapper.*"/>
        <!--<property name="annotationClass" value="javax.annotation.Resource"/>-->
    </bean>

    <bean id="multipleDataSource" class="com.jd.core.multiple.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="dataSource" value-ref="dataSource"></entry>
                <entry key="orderAnalyzeDataSource" value-ref="baseDataSource"></entry>
            </map>
        </property>
        <!-- 默认目标数据源为你主库数据源 -->
        <property name="defaultTargetDataSource" ref="dataSource"/>
    </bean>


    <!-- ***************事务配置************** -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="multipleDataSource"/>
        <property name="globalRollbackOnParticipationFailure" value="true"/>
    </bean>
    <aop:config proxy-target-class="false">
        <aop:advisor pointcut="execution(* com.jd.service..*.*(..))"
                     advice-ref="txAdvice"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*NoTrans" propagation="NOT_SUPPORTED"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" propagation="SUPPORTS" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!--************** 开启注解事务 只对当前配置文件有效 ************** -->

    <bean id="transactionTemplate"
          class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <bean id="dataSourceExchange" class="com.jd.core.multiple.DataSourceExchange"/>
    <aop:config>
        <aop:pointcut id="analyze" expression="@annotation(com.jd.core.multiple.DataSource)"/>
        <aop:advisor advice-ref="dataSourceExchange" pointcut-ref="analyze" order="0"/>
    </aop:config>

</beans>